function net = color_my_initialize_CNN()

    net.layers = {} ;

    % Block 1
    net.layers{end+1} = struct('type', 'conv', ...
                               'weights', {{0.01*randn(5,5,3,32, 'single'), zeros(1, 32, 'single')}}) ;
    net.layers{end+1} = struct('type', 'pool', ...
                               'method', 'max', ...
                               'pool', [3 3]) ;
    net.layers{end+1} = struct('type', 'relu') ;

    % Block 2
    net.layers{end+1} = struct('type', 'conv', ...
                               'weights', {{0.05*randn(5,5,32,32, 'single'), zeros(1,32,'single')}}, ...
                               'stride', 1, ...
                               'pad', 2) ;
    net.layers{end+1} = struct('type', 'relu') ;
    net.layers{end+1} = struct('type', 'pool', ...
                               'method', 'avg', ...
                               'pool', [3 3], ...
                               'stride', 2, ...
                               'pad', [0 1 0 1]) ;

    % Block 3
    net.layers{end+1} = struct('type', 'conv', ...
                               'weights', {{0.05*randn(5,5,32,64, 'single'), zeros(1,64,'single')}}, ...
                               'stride', 1, ...
                               'pad', 2) ;
    net.layers{end+1} = struct('type', 'relu') ;
    net.layers{end+1} = struct('type', 'pool', ...
                               'method', 'avg', ...
                               'pool', [3 3], ...
                               'stride', 2, ...
                               'pad', [0 1 0 1]) ; 

    % Block 4
    net.layers{end+1} = struct('type', 'conv', ...
                               'weights', {{0.05*randn(4,4,64,64, 'single'), zeros(1,64,'single')}}, ...
                               'stride', 1, ...
                               'pad', 0) ;
    net.layers{end+1} = struct('type', 'relu') ;

    % Block 5
    net.layers{end+1} = struct('type', 'conv', ...
                               'weights', {{0.05*randn(2,2,64,4, 'single'), zeros(1,4,'single')}}, ...
                               'stride', 1, ...
                               'pad', 0) ;

    % Loss layer
    net.layers{end+1} = struct('type', 'softmaxloss') ;

net = vl_simplenn_tidy(net) ;

